/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eventdemo.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eventdemo.model.Data;
import eventdemo.model.DataModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Data service. Represents a row in the &quot;Event_Data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataImpl
 * @generated
 */
@JSON(strict = true)
public class DataModelImpl extends BaseModelImpl<Data> implements DataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data model instance should use the <code>Data</code> interface instead.
	 */
	public static final String TABLE_NAME = "Event_Data";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"SourceURL", Types.VARCHAR}, {"hostName", Types.VARCHAR},
		{"Image", Types.VARCHAR}, {"Address", Types.VARCHAR},
		{"Summary", Types.VARCHAR}, {"TotalCount", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("SourceURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hostName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Image", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Summary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TotalCount", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Event_Data (uuid_ VARCHAR(75) null,eventId LONG not null primary key,SourceURL VARCHAR(75) null,hostName VARCHAR(75) null,Image VARCHAR(75) null,Address VARCHAR(75) null,Summary VARCHAR(75) null,TotalCount VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Event_Data";

	public static final String ORDER_BY_JPQL = " ORDER BY data.eventId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Event_Data.eventId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EVENTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Data.class;
	}

	@Override
	public String getModelClassName() {
		return Data.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Data, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Data, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Data, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Data)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Data, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Data, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Data)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Data, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Data, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Data, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Data, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Data, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Data, Object>>();
		Map<String, BiConsumer<Data, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Data, ?>>();

		attributeGetterFunctions.put("uuid", Data::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Data, String>)Data::setUuid);
		attributeGetterFunctions.put("eventId", Data::getEventId);
		attributeSetterBiConsumers.put(
			"eventId", (BiConsumer<Data, Long>)Data::setEventId);
		attributeGetterFunctions.put("SourceURL", Data::getSourceURL);
		attributeSetterBiConsumers.put(
			"SourceURL", (BiConsumer<Data, String>)Data::setSourceURL);
		attributeGetterFunctions.put("hostName", Data::getHostName);
		attributeSetterBiConsumers.put(
			"hostName", (BiConsumer<Data, String>)Data::setHostName);
		attributeGetterFunctions.put("Image", Data::getImage);
		attributeSetterBiConsumers.put(
			"Image", (BiConsumer<Data, String>)Data::setImage);
		attributeGetterFunctions.put("Address", Data::getAddress);
		attributeSetterBiConsumers.put(
			"Address", (BiConsumer<Data, String>)Data::setAddress);
		attributeGetterFunctions.put("Summary", Data::getSummary);
		attributeSetterBiConsumers.put(
			"Summary", (BiConsumer<Data, String>)Data::setSummary);
		attributeGetterFunctions.put("TotalCount", Data::getTotalCount);
		attributeSetterBiConsumers.put(
			"TotalCount", (BiConsumer<Data, String>)Data::setTotalCount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eventId = eventId;
	}

	@JSON
	@Override
	public String getSourceURL() {
		if (_SourceURL == null) {
			return "";
		}
		else {
			return _SourceURL;
		}
	}

	@Override
	public void setSourceURL(String SourceURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_SourceURL = SourceURL;
	}

	@JSON
	@Override
	public String getHostName() {
		if (_hostName == null) {
			return "";
		}
		else {
			return _hostName;
		}
	}

	@Override
	public void setHostName(String hostName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hostName = hostName;
	}

	@JSON
	@Override
	public String getImage() {
		if (_Image == null) {
			return "";
		}
		else {
			return _Image;
		}
	}

	@Override
	public void setImage(String Image) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Image = Image;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_Address == null) {
			return "";
		}
		else {
			return _Address;
		}
	}

	@Override
	public void setAddress(String Address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Address = Address;
	}

	@JSON
	@Override
	public String getSummary() {
		if (_Summary == null) {
			return "";
		}
		else {
			return _Summary;
		}
	}

	@Override
	public void setSummary(String Summary) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Summary = Summary;
	}

	@JSON
	@Override
	public String getTotalCount() {
		if (_TotalCount == null) {
			return "";
		}
		else {
			return _TotalCount;
		}
	}

	@Override
	public void setTotalCount(String TotalCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_TotalCount = TotalCount;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Data.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Data toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Data>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataImpl dataImpl = new DataImpl();

		dataImpl.setUuid(getUuid());
		dataImpl.setEventId(getEventId());
		dataImpl.setSourceURL(getSourceURL());
		dataImpl.setHostName(getHostName());
		dataImpl.setImage(getImage());
		dataImpl.setAddress(getAddress());
		dataImpl.setSummary(getSummary());
		dataImpl.setTotalCount(getTotalCount());

		dataImpl.resetOriginalValues();

		return dataImpl;
	}

	@Override
	public Data cloneWithOriginalValues() {
		DataImpl dataImpl = new DataImpl();

		dataImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		dataImpl.setEventId(this.<Long>getColumnOriginalValue("eventId"));
		dataImpl.setSourceURL(this.<String>getColumnOriginalValue("SourceURL"));
		dataImpl.setHostName(this.<String>getColumnOriginalValue("hostName"));
		dataImpl.setImage(this.<String>getColumnOriginalValue("Image"));
		dataImpl.setAddress(this.<String>getColumnOriginalValue("Address"));
		dataImpl.setSummary(this.<String>getColumnOriginalValue("Summary"));
		dataImpl.setTotalCount(
			this.<String>getColumnOriginalValue("TotalCount"));

		return dataImpl;
	}

	@Override
	public int compareTo(Data data) {
		long primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Data)) {
			return false;
		}

		Data data = (Data)object;

		long primaryKey = data.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Data> toCacheModel() {
		DataCacheModel dataCacheModel = new DataCacheModel();

		dataCacheModel.uuid = getUuid();

		String uuid = dataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dataCacheModel.uuid = null;
		}

		dataCacheModel.eventId = getEventId();

		dataCacheModel.SourceURL = getSourceURL();

		String SourceURL = dataCacheModel.SourceURL;

		if ((SourceURL != null) && (SourceURL.length() == 0)) {
			dataCacheModel.SourceURL = null;
		}

		dataCacheModel.hostName = getHostName();

		String hostName = dataCacheModel.hostName;

		if ((hostName != null) && (hostName.length() == 0)) {
			dataCacheModel.hostName = null;
		}

		dataCacheModel.Image = getImage();

		String Image = dataCacheModel.Image;

		if ((Image != null) && (Image.length() == 0)) {
			dataCacheModel.Image = null;
		}

		dataCacheModel.Address = getAddress();

		String Address = dataCacheModel.Address;

		if ((Address != null) && (Address.length() == 0)) {
			dataCacheModel.Address = null;
		}

		dataCacheModel.Summary = getSummary();

		String Summary = dataCacheModel.Summary;

		if ((Summary != null) && (Summary.length() == 0)) {
			dataCacheModel.Summary = null;
		}

		dataCacheModel.TotalCount = getTotalCount();

		String TotalCount = dataCacheModel.TotalCount;

		if ((TotalCount != null) && (TotalCount.length() == 0)) {
			dataCacheModel.TotalCount = null;
		}

		return dataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Data, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Data, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Data, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Data)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Data, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Data, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Data, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Data)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Data>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Data.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _eventId;
	private String _SourceURL;
	private String _hostName;
	private String _Image;
	private String _Address;
	private String _Summary;
	private String _TotalCount;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Data, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Data)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("eventId", _eventId);
		_columnOriginalValues.put("SourceURL", _SourceURL);
		_columnOriginalValues.put("hostName", _hostName);
		_columnOriginalValues.put("Image", _Image);
		_columnOriginalValues.put("Address", _Address);
		_columnOriginalValues.put("Summary", _Summary);
		_columnOriginalValues.put("TotalCount", _TotalCount);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("eventId", 2L);

		columnBitmasks.put("SourceURL", 4L);

		columnBitmasks.put("hostName", 8L);

		columnBitmasks.put("Image", 16L);

		columnBitmasks.put("Address", 32L);

		columnBitmasks.put("Summary", 64L);

		columnBitmasks.put("TotalCount", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Data _escapedModel;

}